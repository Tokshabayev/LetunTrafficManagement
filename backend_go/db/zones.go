package db

import (
	"context"
	"fmt"
	"log"
)

// NoFlyZone ‚Äî –æ–¥–Ω–∞ ¬´–∑–∞–ø—Ä–µ—Ç–Ω–∞—è¬ª –∑–æ–Ω–∞ –∏–∑ –ë–î
type NoFlyZone struct {
	ID   int
	Name string
}

// CheckZoneViolation –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–æ—á–∫–∞ (lon, lat) –≤ –∫–∞–∫–∏–µ-–ª–∏–±–æ –∑–æ–Ω—ã.
// –ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç ‚Äî –¥–æ–ª–≥–æ—Ç–∞, –≤—Ç–æ—Ä–æ–π ‚Äî —à–∏—Ä–æ—Ç–∞.
func CheckZoneViolation(lon, lat float64) ([]NoFlyZone, error) {
	ctx := context.Background()

	// --- 1) –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ---
	log.Printf("üìç CheckZoneViolation called with lon=%.6f, lat=%.6f", lon, lat)

	// --- 2) –õ–æ–≥–∏—Ä—É–µ–º, –≤ –∫–∞–∫—É—é –ë–î –∏ —Å—Ö–µ–º—É –º—ã –ø–æ–ø–∞–ª–∏ ---
	var dbName string
	if err := Pool.QueryRow(ctx, "SELECT current_database()").Scan(&dbName); err == nil {
		log.Printf("üîó Connected to database: %s", dbName)
	}
	var sp string
	if err := Pool.QueryRow(ctx, "SHOW search_path").Scan(&sp); err == nil {
		log.Printf("üîç search_path = %q", sp)
	}

	// --- 3) –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∑–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –ª–µ–∂–∞—Ç –≤ public.no_fly_zones ---
	rowsAll, err := Pool.Query(ctx,
		"SELECT id, name, ST_AsText(polygon) FROM public.no_fly_zones")
	if err != nil {
		log.Printf("‚ùå Error listing no_fly_zones: %v", err)
	} else {
		defer rowsAll.Close()
		for rowsAll.Next() {
			var id int
			var name, wkt string
			if err := rowsAll.Scan(&id, &name, &wkt); err != nil {
				log.Printf("‚ùå Scan zone error: %v", err)
			}
		}
	}

	// --- 4) –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è ---
	const query = `
        SELECT id, name
          FROM public.no_fly_zones
         WHERE ST_Intersects(
                 polygon,
                 ST_SetSRID(ST_MakePoint($1, $2), 4326)
               );
    `
	rows, err := Pool.Query(ctx, query, lon, lat)
	if err != nil {
		return nil, fmt.Errorf("Query zones error: %v", err)
	}
	defer rows.Close()

	var violations []NoFlyZone
	for rows.Next() {
		var z NoFlyZone
		if err := rows.Scan(&z.ID, &z.Name); err != nil {
			log.Printf("‚ùå Scan violation zone error: %v", err)
			continue
		}
		log.Printf("‚û°Ô∏è Found violation zone: %s (ID %d)", z.Name, z.ID)
		violations = append(violations, z)
	}

	if len(violations) == 0 {
		log.Println("‚ÑπÔ∏è No zone violations")
	}
	return violations, nil
}
