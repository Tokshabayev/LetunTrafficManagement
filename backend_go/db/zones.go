package db

import (
	"context"
	"fmt"
	"log"
)

// NoFlyZone –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É ¬´–∑–∞–ø—Ä–µ—Ç–Ω—É—é¬ª –∑–æ–Ω—É –∏–∑ –ë–î.
type NoFlyZone struct {
	ID   int
	Name string
}

// CheckZoneViolation –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–æ—á–∫–∞ (lon, lat) –≤ –∫–∞–∫–∏–µ-–ª–∏–±–æ –∑–∞–ø—Ä–µ—Ç–Ω—ã–µ –∑–æ–Ω—ã.
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: lon ‚Äî –¥–æ–ª–≥–æ—Ç–∞, lat ‚Äî —à–∏—Ä–æ—Ç–∞.
func CheckZoneViolation(lon, lat float64) ([]NoFlyZone, error) {
	ctx := context.Background()

	// –õ–æ–≥ –≤—Ö–æ–¥–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
	log.Printf("üìç CheckZoneViolation called with lon=%.6f, lat=%.6f", lon, lat)

	// –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –∫ PostGIS
	const query = `
        SELECT id, name
          FROM public.no_fly_zones
         WHERE ST_Intersects(
                 polygon,
                 ST_SetSRID(ST_MakePoint($1, $2), 4326)
               );
    `
	rows, err := Pool.Query(ctx, query, lon, lat)
	if err != nil {
		return nil, fmt.Errorf("Query zones error: %w", err)
	}
	defer rows.Close()

	var zones []NoFlyZone
	for rows.Next() {
		var z NoFlyZone
		if err := rows.Scan(&z.ID, &z.Name); err != nil {
			log.Printf("‚ùå Error scanning zone row: %v", err)
			continue
		}
		log.Printf("‚û°Ô∏è Found violation zone: %s (ID %d)", z.Name, z.ID)
		zones = append(zones, z)
	}
	if len(zones) == 0 {
		log.Println("‚ÑπÔ∏è No zone violations")
	}
	return zones, nil
}
