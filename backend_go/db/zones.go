package db

import (
	"context"
	"fmt"
	"log"
)

type NoFlyZone struct {
	ID   int
	Name string
}

// CheckZoneViolation –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ
func CheckZoneViolation(lat, lon float64) ([]NoFlyZone, error) {
	query := `
		SELECT id, name 
		FROM no_fly_zones
		WHERE ST_Intersects(
			polygon,
			ST_SetSRID(ST_MakePoint($1, $2), 4326)
		)
	`
	log.Printf("üìç –ü–æ—à—ë–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–æ–Ω—ã: lat=%.6f, lon=%.6f", lat, lon)

	rows, err := Pool.Query(context.Background(), query, lon, lat)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–æ–Ω: %v", err)
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–æ–Ω: %w", err)
	}
	defer rows.Close()

	var zones []NoFlyZone
	for rows.Next() {
		var z NoFlyZone
		err := rows.Scan(&z.ID, &z.Name)
		if err != nil {
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–æ–Ω—ã: %v", err)
			continue
		}

		// üí• –í–û–¢ –≠–¢–ê –°–¢–†–û–ö–ê –î–û–õ–ñ–ù–ê –ë–´–¢–¨
		log.Printf("‚û°Ô∏è –ù–∞–π–¥–µ–Ω–∞ –∑–æ–Ω–∞: %s (ID %d)", z.Name, z.ID)

		zones = append(zones, z)
	}

	return zones, nil
}
