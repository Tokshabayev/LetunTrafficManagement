package db

// import (
// 	"log"
// )

// // NoFlyZone ‚Äî –æ–¥–Ω–∞ ¬´–∑–∞–ø—Ä–µ—Ç–Ω–∞—è¬ª –∑–æ–Ω–∞ –≤ –ø–∞–º—è—Ç–∏
// type NoFlyZone struct {
// 	ID     int
// 	Name   string
// 	Points [][2]float64 // –≤–µ—Ä—à–∏–Ω—ã –ø–æ–ª–∏–≥–æ–Ω–∞: [][2]float64{ {lon,lat}, ‚Ä¶ }
// }

// // inMemoryZones ‚Äî –∑–¥–µ—Å—å –∂—ë—Å—Ç–∫–æ –∑–∞–¥–∞—ë–º –∑–æ–Ω—ã
// var inMemoryZones = []NoFlyZone{
// 	{
// 		ID:   1,
// 		Name: "Zone A",
// 		Points: [][2]float64{
// 			{71.4300, 51.1280},
// 			{71.4320, 51.1280},
// 			{71.4310, 51.1300},
// 			{71.4300, 51.1280}, // –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–≤–µ–Ω –ø–µ—Ä–≤–æ–º—É, —á—Ç–æ–±—ã –∑–∞–º–∫–Ω—É—Ç—å
// 		},
// 	},
// 	{
// 		ID:   2,
// 		Name: "Zone B",
// 		Points: [][2]float64{
// 			{71.4310, 51.1290},
// 			{71.4330, 51.1290},
// 			{71.4330, 51.1310},
// 			{71.4310, 51.1310},
// 			{71.4310, 51.1290},
// 		},
// 	},
// 	// –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∑–æ–Ω—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏‚Ä¶
// }

// // CheckZoneViolation –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–æ—á–∫–∞ (lon, lat) –≤ –∫–∞–∫—É—é-–ª–∏–±–æ –∏–∑ inMemoryZones.
// func CheckZoneViolation(lon, lat float64) ([]NoFlyZone, error) {
// 	log.Printf("üìç In-mem CheckZoneViolation: lon=%.6f, lat=%.6f", lon, lat)
// 	var hits []NoFlyZone
// 	for _, z := range inMemoryZones {
// 		if pointInPolygon(lon, lat, z.Points) {
// 			log.Printf("‚û°Ô∏è Found violation in-mem: %s (ID %d)", z.Name, z.ID)
// 			hits = append(hits, z)
// 		}
// 	}
// 	if len(hits) == 0 {
// 		log.Println("‚ÑπÔ∏è No zone violations (in-mem)")
// 	}
// 	return hits, nil
// }

// // pointInPolygon ‚Äî –∞–ª–≥–æ—Ä–∏—Ç–º ¬´ray casting¬ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ø–∞–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏ –≤–Ω—É—Ç—Ä—å –ø–æ–ª–∏–≥–æ–Ω–∞.
// func pointInPolygon(x, y float64, poly [][2]float64) bool {
// 	inside := false
// 	n := len(poly)
// 	for i := 0; i < n; i++ {
// 		j := (i + n - 1) % n
// 		xi, yi := poly[i][0], poly[i][1]
// 		xj, yj := poly[j][0], poly[j][1]
// 		// –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Ä–µ–±—Ä–∞ [j‚Üíi] —Å –ª—É—á–æ–º –≤–ø—Ä–∞–≤–æ –æ—Ç (x,y)
// 		if ((yi > y) != (yj > y)) &&
// 			(x < (xj-xi)*(y-yi)/(yj-yi)+xi) {
// 			inside = !inside
// 		}
// 	}
// 	return inside
// }
